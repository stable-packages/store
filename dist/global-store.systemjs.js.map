{"version":3,"file":"global-store.systemjs.js","sources":["../src/errors.ts","../src/util.ts","../src/createReadonlyStore.ts","../src/createAsyncReadonlyStore.ts","../src/createStore.ts","../src/createAsyncStore.ts"],"sourcesContent":["export class Prohibited extends Error {\n  constructor(public moduleName: string, public action: string) {\n    super(`Unable to perform '${action}' on a locked store from module '${moduleName}'`)\n\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class AccessedBeforeLock extends Error {\n  constructor(public moduleName: string) {\n    super(`A readonly store from '${moduleName}' is being accessed before it is locked. Please call the approprate function in '${moduleName}' to lock the store.`)\n\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { StoreInitializer, StoreValue, StoreVersion, StoreKey } from './types';\nimport { StoreId, Stores } from './typesInternal';\n\nexport function getStoreValue(stores: Stores, id: StoreId): any {\n  return getStore(stores, id).value\n}\n\nexport function initStoreValue<T extends StoreValue>(stores: Stores, id: StoreId, version: StoreVersion, initializer: StoreInitializer<T>) {\n  const store = getStore(stores, id)\n  store.init = initializer(store.init, store.versions)\n  store.versions.push(version)\n  store.value = createStoreValue(store.init)\n}\n\nexport function resetStoreValue(stores: Stores, id: StoreId) {\n  const store = getStore(stores, id)\n  store.value = createStoreValue(store.init)\n}\n\nexport function getStore(stores: Stores, id: StoreId) {\n  const moduleStore = stores[id.moduleName] = stores[id.moduleName] || {}\n  return moduleStore[id.key as any] = moduleStore[id.key as any] || { versions: [], init: {} }\n}\n\nexport function createStoreValue(initialValue: any) {\n  return { ...initialValue }\n}\n\nexport type StoreCreator<S> = {\n  version: StoreVersion,\n  resolve: (store: S) => void,\n  initializer: StoreInitializer<any>\n}\n\nexport function resolveCreators<S>(moduleName: string, key: StoreKey, storeCreators: Array<StoreCreator<S>>, createStore: any) {\n  sortByVersion(storeCreators).forEach(({ version, resolve, initializer }) => resolve(createStore(moduleName, key, version, initializer)))\n}\n\nexport function sortByVersion<S>(storeCreators: Array<StoreCreator<S>>) {\n  return storeCreators.sort((a, b) => compareVersion(toStringVersion(a.version), toStringVersion(b.version)))\n}\n\nfunction toStringVersion(v: string | number) {\n  return typeof v === 'number' ? `0.0.${v}` : v\n}\n\nexport function compareVersion(a: string, b: string) {\n  const v1 = a.split('.').map(v => Number(v))\n  const v2 = b.split('.').map(v => Number(v))\n  return v1[0] !== v2[0] ? v1[0] - v2[0] :\n    v1[1] !== v2[1] ? v1[1] - v2[1] :\n      v1[2] - v2[2]\n}\n","import { Store } from './createStore';\nimport { AccessedBeforeLock, Prohibited } from './errors';\nimport { StoreInitializer, StoreKey, StoreValue, StoreVersion } from './types';\nimport { StoreId, Stores } from './typesInternal';\nimport { getStore, getStoreValue, initStoreValue, resetStoreValue } from './util';\n\nconst readonlyStores: Stores = {}\n\nexport type ReadonlyStore<T extends StoreValue> = Store<T> & {\n  /**\n   * Gets a writable value from the store.\n   * This can be used for configure the store value before it is locked.\n   * This is useful if your configuration is distributed in nature.\n   * When configuration is completed,\n   * you should `lock()` the store and use the `get()` method.\n   */\n  getWritable(): T\n  /**\n   * Disable the readonly feature of the store.\n   * Calling this function will make the store not readonly.\n   * It will behaves just like the normal `Store`.\n   * Obviously, you should only call this during testing.\n   */\n  disableProtection(): void,\n  /**\n   * Lock the store so that it cannot be modified.\n   * @param finalizer A finalizer object to do a final process of the value.\n   * You can use this to change the value, or freeze object.\n   * By default, the value itself will be frozen,\n   * If it contains array properties, those will also be frozen.\n   */\n  lock(finalizer?: Partial<{ [K in keyof T]: (value: T[K]) => T[K] }> & Record<keyof any, (value: any) => any>): ReadonlyStore<T>\n}\n\n/**\n * Creates a readonly store of type T.\n * @param moduleName Name of your module. This will be used during reporting.\n * @param key Specific key of the store scoped to your module. This will not appear in reporting.\n * You can use `Symbol.for(<some key>)` to make the store accessible accross service workers and iframes.\n *\n * It is recommend that the key contains the purpose as well as a random value such as GUID.\n * e.g. `some-purpose:c0574313-5f6c-4c02-a875-ad793d47b695`\n * This key should not change across versions.\n * @param initializer Initializing function for the store.\n */\nexport function createReadonlyStore<\n  T extends StoreValue\n>(moduleName: string, key: StoreKey, version: StoreVersion, initializer: StoreInitializer<T>): ReadonlyStore<T> {\n  initStoreValue(readonlyStores, { moduleName, key }, version, initializer)\n  let isLocked = false\n  let disabled = false\n  return {\n    disableProtection() {\n      if (isLocked) throw new Prohibited(moduleName, 'ReadonlyStore#disableProtection')\n      disabled = true\n    },\n    get() {\n      if (!disabled && !isLocked) throw new AccessedBeforeLock(moduleName)\n      return getStoreValue(readonlyStores, { moduleName, key })\n    },\n    getWritable() {\n      if (!disabled && isLocked) throw new Prohibited(moduleName, 'ReadonlyStore#getWritable')\n      return getStoreValue(readonlyStores, { moduleName, key })\n    },\n    lock(finalizer) {\n      if (!disabled && !isLocked) {\n        if (finalizer) {\n          updateStoreValue(readonlyStores, { moduleName, key }, finalizer)\n        }\n        freezeStoreValue(readonlyStores, { moduleName, key })\n        isLocked = true\n        disabled = false\n      }\n      return this\n    },\n    reset() {\n      if (!disabled && isLocked) throw new Prohibited(moduleName, 'ReadonlyStore#reset')\n      resetStoreValue(readonlyStores, { moduleName, key })\n    }\n  }\n}\n\n\nfunction updateStoreValue(stores: Stores, id: StoreId, finalizer: any /* Record<any, (value: any) => any> */) {\n  const current = getStoreValue(stores, id)\n  Object.keys(finalizer).forEach(k => current[k] = finalizer[k](current[k]))\n}\n\nfunction freezeStoreValue(stores: Stores, id: StoreId) {\n  const store = getStore(stores, id)\n  store.value = freezeValue(store.value)\n}\n\nfunction freezeValue(storeValue: StoreValue) {\n  Object.keys(storeValue).forEach(k => freezeArray(storeValue, k))\n  // istanbul ignore next\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(storeValue).forEach(k => freezeArray(storeValue, k))\n  }\n\n  return Object.freeze(storeValue)\n}\n\nfunction freezeArray(storeValue: StoreValue, k: any) {\n  const value = storeValue[k]\n  if (Array.isArray(value)) {\n    storeValue[k] = Object.freeze(value)\n  }\n}\n","import { createReadonlyStore, ReadonlyStore } from './createReadonlyStore';\nimport { StoreInitializer, StoreKey, StoreValue, StoreVersion } from './types';\nimport { resolveCreators, StoreCreator } from './util';\n\nconst asyncReadonlyStoreCreators: Record<string, Record<StoreKey, Array<StoreCreator<ReadonlyStore<any>>>>> = {}\n\n/**\n * Creates a readonly store of type T.\n * @param moduleName Name of your module. This will be used during reporting.\n * @param key Specific key of the store scoped to your module. This will not appear in reporting.\n * You can use `Symbol.for(<some key>)` to make the store accessible accross service workers and iframes.\n *\n * It is recommend that the key contains the purpose as well as a random value such as GUID.\n * e.g. `some-purpose:c0574313-5f6c-4c02-a875-ad793d47b695`\n * This key should not change across versions.\n * @param version Version of the store. It can be numeric or string in the format of \"major.minor.patch\".\n * No other string format is accepted.\n * When it is numeric, it is compare to the patch number of the string version,\n * if there is a mix of number and string versions.\n * @param initializer Initializing function for the store.\n */\nexport function createAsyncReadonlyStore<T extends StoreValue>(\n  moduleName: string,\n  key: StoreKey,\n  version: StoreVersion,\n  initializer: StoreInitializer<T>\n): Promise<ReadonlyStore<T>> {\n  return new Promise(resolve => {\n    const creatorsOfModules = asyncReadonlyStoreCreators[moduleName] = asyncReadonlyStoreCreators[moduleName] || {}\n    const storeCreators = creatorsOfModules[key as any] = creatorsOfModules[key as any] || []\n    storeCreators.push({ version, resolve, initializer })\n  })\n}\n\n/**\n * Initializes the stores for `createAsyncStore()`.\n */\nexport function initializeAsyncReadonlyStore(moduleName: string, key?: StoreKey) {\n  const creatorsOfModules = asyncReadonlyStoreCreators[moduleName]\n  if (!creatorsOfModules) return\n\n  if (key) {\n    const storeCreators = creatorsOfModules[key as any]\n    resolveCreators(moduleName, key, storeCreators, createReadonlyStore)\n  }\n  else {\n    Object.keys(creatorsOfModules).forEach(k => {\n      const storeCreators = creatorsOfModules[k]\n      resolveCreators(moduleName, k, storeCreators, createReadonlyStore)\n    })\n  }\n}\n","import { StoreInitializer, StoreValue, StoreVersion, StoreKey } from './types';\nimport { Stores } from './typesInternal';\nimport { getStoreValue, initStoreValue, resetStoreValue } from './util';\n\nexport type Store<T extends StoreValue> = {\n  /**\n   * Gets value from the store.\n   */\n  get(): T\n  /**\n   * Resets the store to its initial value.\n   * You should only use this during testing.\n   */\n  reset(): void\n}\n\nconst stores: Stores = {}\n\n/**\n * Creates a store of type T.\n * @param moduleName Name of your module. This will be used during reporting.\n * @param key Specific key of the store scoped to your module. This will not appear in reporting.\n * You can use `Symbol.for(<some key>)` to make the store accessible accross service workers and iframes.\n *\n * It is recommend that the key contains the purpose as well as a random value such as GUID.\n * e.g. `some-purpose:c0574313-5f6c-4c02-a875-ad793d47b695`\n * This key should not change across versions.\n * @param initializer Initializing function for the store\n */\nexport function createStore<\n  T extends StoreValue\n>(moduleName: string, key: StoreKey, version: StoreVersion, initializer: StoreInitializer<T>): Store<T> {\n  initStoreValue(stores, { moduleName, key }, version, initializer)\n\n  return {\n    get: () => getStoreValue(stores, { moduleName, key }),\n    reset: () => resetStoreValue(stores, { moduleName, key })\n  }\n}\n","import { createStore, Store } from './createStore';\nimport { StoreInitializer, StoreKey, StoreValue, StoreVersion } from './types';\nimport { resolveCreators, StoreCreator } from './util';\n\nconst asyncStoreCreators: Record<string, Record<StoreKey, Array<StoreCreator<Store<any>>>>> = {}\n\n/**\n * Creates a store of type T asychronously.\n * @param moduleName Name of your module. This will be used during reporting.\n * @param key Specific key of the store scoped to your module. This will not appear in reporting.\n * You can use `Symbol.for(<some key>)` to make the store accessible accross service workers and iframes.\n *\n * It is recommend that the key contains the purpose as well as a random value such as GUID.\n * e.g. `some-purpose:c0574313-5f6c-4c02-a875-ad793d47b695`\n * This key should not change across versions.\n * @param version Version of the store. It can be numeric or string in the format of \"major.minor.patch\".\n * No other string format is accepted.\n * When it is numeric, it is compare to the patch number of the string version,\n * if there is a mix of number and string versions.\n * @param initializer Initializing function for the store\n */\nexport async function createAsyncStore<\n  T extends StoreValue,\n  V extends StoreVersion\n>(moduleName: string, key: StoreKey, version: V, initializer: StoreInitializer<T>): Promise<Store<T>> {\n  return new Promise(resolve => {\n    const creatorsOfModules = asyncStoreCreators[moduleName] = asyncStoreCreators[moduleName] || {}\n    const storeCreators = creatorsOfModules[key as any] = creatorsOfModules[key as any] || []\n    storeCreators.push({ version, resolve, initializer })\n  })\n}\n\n/**\n * Initializes the stores for `createAsyncStore()`.\n */\nexport function initializeAsyncStore(moduleName: string, key?: StoreKey) {\n  const creatorsOfModules = asyncStoreCreators[moduleName]\n  if (!creatorsOfModules) return\n\n  if (key) {\n    const storeCreators = creatorsOfModules[key as any]\n    resolveCreators(moduleName, key, storeCreators, createStore)\n  }\n  else {\n    Object.keys(creatorsOfModules).forEach(k => {\n      const storeCreators = creatorsOfModules[k]\n      resolveCreators(moduleName, k, storeCreators, createStore)\n    })\n  }\n}\n"],"names":[],"mappings":"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"}