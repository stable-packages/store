{"version":3,"file":"global-store.es.js","sources":["../src/errors.ts","../src/util.ts","../src/createReadonlyStore.ts","../src/createStore.ts"],"sourcesContent":["export class Prohibited extends Error {\n  constructor(public moduleName: string, public action: string) {\n    super(`Unable to '${action}' on a locked store used by module '${moduleName}'`)\n\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class AccessedBeforeLock extends Error {\n  constructor(public moduleName: string) {\n    super(`A readonly store from '${moduleName}' is being accessed before it is locked. Please call the approprate function in '${moduleName}' to lock the store.`)\n\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { StoreId, Stores, StoreValue, StoreInitializer } from './types';\n\nexport function getStoreValue(stores: Stores, id: StoreId): any {\n  const moduleStore = getModuleStore(stores, id.moduleName)\n  return moduleStore[id.key as any].value\n}\n\nexport function initStoreValue<T extends StoreValue>(stores: Stores, id: StoreId, initializer: StoreInitializer<T>) {\n  const moduleStore = getModuleStore(stores, id.moduleName)\n  const store = moduleStore[id.key as any]\n  const init = initializer(store && store.init || {})\n  moduleStore[id.key as any] = { init, value: createStoreValue(init) }\n}\n\nexport function resetStoreValue(stores: Stores, id: StoreId) {\n  const moduleStore = getModuleStore(stores, id.moduleName)\n  moduleStore[id.key as any].value = createStoreValue(moduleStore[id.key as any].init)\n}\n\nexport function getModuleStore(stores: Stores, moduleName: string) {\n  return stores[moduleName] = stores[moduleName] || {}\n}\n\nexport function createStoreValue(initialValue: any) {\n  return { ...initialValue }\n}\n","import { Store } from './createStore';\nimport { Prohibited, AccessedBeforeLock } from './errors';\nimport { StoreId, StoreInitializer, Stores, StoreValue } from './types';\nimport { getModuleStore, getStoreValue, initStoreValue, resetStoreValue } from './util';\n\n/**\n * Store mode:\n * 'readonly': The store in\n */\nexport type StoreMode = 'readonly' | 'writable'\n\nconst readonlyStores: Stores = {}\n\nexport type ReadonlyStore<T extends StoreValue> = Store<T> & {\n  /**\n   * Gets a writable value from the store.\n   * This can be used for configure the store value before it is locked.\n   * This is useful if your configuration is distributed in nature.\n   * When configuration is completed,\n   * you should `lock()` the store and use the `get()` method.\n   */\n  getWritable(): T\n  /**\n   * Open the store for testing.\n   * Calling this function will make the store not readonly.\n   * It will behaves just like the normal `Store`.\n   * Obviously, you should only call this during testing.\n   */\n  openForTesting(): void,\n  /**\n   * Freezes the store so that it cannot be modified.\n   */\n  lock(finalizer?: Partial<{ [K in keyof T]: (current: T[K]) => T[K] }>): ReadonlyStore<T>\n}\n\n/**\n * Creates a readonly store of type T.\n * @param id A unique identifier to the store.\n * @param initializer Initializing function for the store\n * @param mode The store mode. Defaults to 'initialize'.\n */\nexport function createReadonlyStore<\n  T extends StoreValue\n>(id: StoreId, initializer: StoreInitializer<T>): ReadonlyStore<T> {\n  initStoreValue(readonlyStores, id, initializer)\n  let isLocked = false\n  let testing = false\n  return {\n    openForTesting() {\n      if (isLocked) throw new Prohibited(id.moduleName, 'enable testing')\n      testing = true\n    },\n    // todo: getter/setter for properties\n    get() {\n      if (!testing && !isLocked) throw new AccessedBeforeLock(id.moduleName)\n      return getStoreValue(readonlyStores, id)\n    },\n    getWritable() {\n      if (!testing && isLocked) throw new Prohibited(id.moduleName, 'ReadonlyStore#getWritable')\n      return getStoreValue(readonlyStores, id)\n    },\n    lock(finalizer) {\n      if (!isLocked) {\n        if (finalizer) {\n          updateStoreValue(readonlyStores, id, finalizer)\n        }\n        freezeStoreValue(readonlyStores, id)\n        isLocked = true\n        testing = false\n      }\n      return this\n    },\n    reset() {\n      if (!testing && isLocked) throw new Prohibited(id.moduleName, 'ReadonlyStore#reset')\n      resetStoreValue(readonlyStores, id)\n    }\n  }\n}\n\n\nfunction updateStoreValue(stores: Stores, id: StoreId, finalizer: any /* Record<any, (value: any) => any> */) {\n  const moduleStore = getModuleStore(stores, id.moduleName)\n  const current = moduleStore[id.key as any].value\n\n  Object.keys(finalizer).forEach(k => current[k] = finalizer[k](current[k]))\n}\n\nfunction freezeStoreValue(stores: Stores, id: StoreId) {\n  const moduleStore = getModuleStore(stores, id.moduleName)\n  const store = moduleStore[id.key as any]\n\n  moduleStore[id.key as any] = {\n    init: store.init,\n    value: freezeValue(store.value)\n  }\n}\n\nfunction freezeValue(storeValue: StoreValue) {\n  Object.keys(storeValue).forEach(k => freezeArray(storeValue, k))\n  // istanbul ignore next\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(storeValue).forEach(k => freezeArray(storeValue, k))\n  }\n\n  return Object.freeze(storeValue)\n}\n\nfunction freezeArray(storeValue: StoreValue, k: any) {\n  const value = storeValue[k]\n  if (Array.isArray(value)) {\n    storeValue[k] = Object.freeze(value)\n  }\n}\n","import { StoreId, StoreInitializer, Stores, StoreValue } from './types';\nimport { getStoreValue, initStoreValue, resetStoreValue } from './util';\n\nexport type Store<T extends StoreValue> = {\n  /**\n   * Gets value from the store.\n   */\n  get(): T\n  /**\n   * Resets the store to its initial value.\n   * You should only use this during testing.\n   */\n  reset(): void\n}\n\nconst stores: Stores = {}\n\n/**\n * Creates a store of type T.\n * @param id A unique identifier to the store.\n * @param initializer Initializing function for the store\n */\nexport function createStore<\n  T extends StoreValue\n>(id: StoreId, initializer: StoreInitializer<T>): Store<T> {\n  initStoreValue(stores, id, initializer)\n\n  return {\n    get: () => getStoreValue(stores, id),\n    reset: () => resetStoreValue(stores, id)\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}