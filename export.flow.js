/**
 * Flowtype definitions for global-store
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 */




    declare module 'types' {
      declare export type StoreValue = {[key: string | Symbol]: mixed, ...};
	declare export type StoreVersion = undefined: /* NO PRINT IMPLEMENTED: TemplateLiteralType */ any | number;
	declare export type StoreInitializer<T: StoreValue> = (current: StoreValue, processedVersions: StoreVersion[]) => T;
	declare export interface StoreOptions<T: StoreValue> {
moduleName: string,
key?: string,
version: StoreVersion,
initializer: StoreInitializer<T>,
} 
    }
    

    declare module 'typesInternal' {
      import type {
            StoreInitializer,StoreVersion,StoreValue
            } from 'types';

	declare export interface StoreId {
moduleName: string,
key?: string,
} 
	declare export type Stores = {[key: $PropertyType<StoreId, "moduleName">]: {[key: string]: {
versions: StoreVersion[],
initializers: StoreInitializer<StoreValue>[],
value: StoreValue,...
}, ...}, ...};
	declare export interface StoreCreator<S> {
version: StoreVersion,
resolve: (store: S) => void,
initializer: StoreInitializer<StoreValue>,
} 
	declare export type StoreCreators<Store> = {[key: $PropertyType<StoreId, "moduleName">]: {[key: string]: Array<StoreCreator<Store>>, ...}, ...};
    }
    

    declare module 'toVersionArray' {
      import type {
            StoreVersion
            } from 'types';

	declare export type ParsedVersion = [number, number, number];
	declare export function toVersionArray(v: StoreVersion): ParsedVersion

    }
    

    declare module 'compareVersion' {
      import type {
            StoreVersion
            } from 'types';

	
/**
 * Compare version.
 * Positive when processed > current
 * Negative when processed < current
 */
declare export function compareVersion(processed: StoreVersion, current: StoreVersion): number

    }
    

    declare module 'shouldInvokeInitializer' {
      import type {
            StoreVersion
            } from 'types';

	declare export function shouldInvokeInitializer(versions: StoreVersion[], version: StoreVersion): boolean

    }
    

    declare module 'util' {
      import type {
            createStore
            } from 'createStore';

	import type {
            StoreInitializer,StoreValue,StoreVersion
            } from 'types';

	import type {
            StoreCreator,StoreId,Stores
            } from 'typesInternal';

	declare export function getStoreValue<T: StoreValue>(stores: Stores, id: StoreId): T

	declare export function initStoreValue<T: StoreValue>(
stores: Stores,
id: StoreId,
version: StoreVersion,
initializer: StoreInitializer<T>): void

	declare export function resetStoreValue(stores: Stores, id: StoreId): void

	declare export function getStore(
stores: Stores,
id: StoreId): {
versions: StoreVersion[],
initializers: StoreInitializer<StoreValue>[],
value: StoreValue,...
}

	declare export function resolveCreators(
moduleName: string,
key: string,
storeCreators: Array<StoreCreator<any>>,
cs: typeof createStore): void

	declare export function sortByVersion<S>(storeCreators: Array<StoreCreator<S>>): StoreCreator<S>[]

	declare export function freezeStoreValue(stores: Stores, id: StoreId, value?: StoreValue): void

    }
    

    declare module 'createStore' {
      import type {
            StoreOptions,StoreValue
            } from 'types';

	declare export type Store<T: StoreValue> = {

/**
 * The store value.
 */
+value: T,

/**
 * Freezes the store value.
 * @param value Optional new store value.
 * If supplied, this value will be freezed and used as the store value.
 * You can use this update the store value and freeze part of it.
 * If not supplied,
 * the original value will be freezed and its array property will also be freezed.
 */
freeze(value?: $ObjMapi<T, <k>(k) => $ReadOnly<$ElementType<T, k>>>): void,

/**
 * Resets the store to its initial value.
 * You should only use this during testing.
 */
reset(): void,...
};
	
/**
 * Creates a store of type T.
 * @see https ://www.npmjs.com/package/global-store
 */
declare export function createStore<T: StoreValue>(x: StoreOptions<T>): Store<T>

    }
    

    declare module 'createAsyncStore' {
      import type {
            Store
            } from 'createStore';

	import type {
            StoreOptions,StoreValue
            } from 'types';

	
/**
 * Creates a store of type T asynchronously.
 * @see https ://github.com/unional/global-store#createAsyncStore
 */
declare export function createAsyncStore<T: StoreValue>(x: StoreOptions<T>): Promise<Store<T>>

	
/**
 * Initializes the stores for `createAsyncStore()`.
 * @see https ://github.com/unional/global-store#initializeAsyncStore
 */
declare export function initializeAsyncStore(moduleName: string, key?: string): void

    }
    

    declare module 'index' {
      declare export * from 'createAsyncStore';

	declare export * from 'createStore';

	declare export {
          createStore as default
        }from 'createStore';

	declare export * from 'types';

    }
    
